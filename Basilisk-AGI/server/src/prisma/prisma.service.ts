import { Injectable, OnModuleInit, OnModuleDestroy } from '@nestjs/common';
import { PrismaClient } from '@prisma/client';

@Injectable()
export class PrismaService
  extends PrismaClient
  implements OnModuleInit, OnModuleDestroy
{
  async onModuleInit() {
    try {
      console.log('üîÑ Tentando conectar ao MongoDB...');
      console.log('üîó Cluster:', process.env.DATABASE_URL?.match(/[@]([^.]+)/)?.[1] || 'Unknown');
      console.log('üåç Environment:', process.env.NODE_ENV);
      console.log('üñ•Ô∏è Platform:', process.env.RENDER ? 'Render' : 'Local');
      console.log('üìä Database: MongoDB Atlas');
      
      // Timeout personalizado
      const connectPromise = this.$connect();
      const timeoutPromise = new Promise((_, reject) => 
        setTimeout(() => reject(new Error('Connection timeout after 15s')), 15000)
      );
      
      await Promise.race([connectPromise, timeoutPromise]);
      
      console.log('‚úÖ MongoDB connected successfully');
    } catch (error) {
      console.error('‚ùå MongoDB connection failed:', error.message);
      console.error('‚ùå Error type:', error.constructor.name);
      
      // N√£o falha a aplica√ß√£o
      console.log('‚ö†Ô∏è App will continue without database');
    }
  }

  async onModuleDestroy() {
    await this.$disconnect();
  }
}
